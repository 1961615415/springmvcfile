
  package com.file.utils;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import org.springframework.stereotype.Service;
@Service
public class MarkImage3 {
	// 水印透明度
		private static float alpha = 0.5f;
		// 水印横向位置
		private static int positionWidth = 12;
		// 水印纵向位置
		private static int positionHeight = 12;
		// 水印文字字体
		private static Font font = new Font("宋体", Font.CENTER_BASELINE, 18);
		// 水印文字颜色
		private static Color color = Color.red;
		/**
		 * 给图片添加水印文字、可设置水印文字的旋转角度 是否批量添加
		 * 
		 * @param logoText
		 * @param srcImgPath
		 * @param targerPath
		 * @param degree
		 * @param pl 
		 */
		public static void markImageByText(String logoText, String srcImgPath,
				String targerPath, Integer degree,boolean pl) {
			InputStream is = null;
			OutputStream os = null;
			try {
				// 1、源图片
				Image srcImg = ImageIO.read(new File(srcImgPath));
				BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),
						srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);
				// 2、得到画笔对象
				Graphics2D g = buffImg.createGraphics();
				// 3、设置对线段的锯齿状边缘处理
				g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
						RenderingHints.VALUE_INTERPOLATION_BILINEAR);
				g.drawImage(
						srcImg.getScaledInstance(srcImg.getWidth(null),
								srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,
						null);
				// 4、设置水印旋转
				if (null != degree) {
					g.rotate(Math.toRadians(degree),
							(double) buffImg.getWidth() / 2,
							(double) buffImg.getHeight() / 2);
				}
				// 5、设置水印文字颜色
				g.setColor(color);
				// 6、设置水印文字Font
				g.setFont(font);
				// 7、设置水印文字透明度
				g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,
						alpha));
				// 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)
				if(pl){
					int width = buffImg.getWidth();
					int heigth = buffImg.getHeight();
					//添加多个文字水印
					for (int i = 0; i < width; i++) {
						for (int j = 0; j < heigth; j++) {
							g.drawString(logoText, positionWidth + 50 * j,
									positionHeight + 50 * i);
						}
					}	
				}else{
					g.drawString(logoText, positionWidth,
							positionHeight);
				}
				
				// 9、释放资源
				g.dispose();
				// 10、生成图片
				os = new FileOutputStream(targerPath);
				ImageIO.write(buffImg, "JPG", os);

				System.out.println("图片完成添加水印文字");

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (null != is)
						is.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
				try {
					if (null != os)
						os.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		/**
	     * 给图片添加水印图片、可设置水印图片旋转角度
	     * 
	     * @param iconPath
	     *            水印图片路径
	     * @param srcImgPath
	     *            源图片路径
	     * @param targerPath
	     *            目标图片路径
	     * @param degree
	     *            水印图片旋转角度
	     */
	    public static void markImageByIcon(String iconPath, String srcImgPath,
	            String targerPath, Integer degree,boolean pl) {
	        OutputStream os = null;
	        try {

	            Image srcImg = ImageIO.read(new File(srcImgPath));

	            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),
	                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);

	            // 1、得到画笔对象
	            Graphics2D g = buffImg.createGraphics();

	            // 2、设置对线段的锯齿状边缘处理
	            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
	                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);

	            g.drawImage(
	                    srcImg.getScaledInstance(srcImg.getWidth(null),
	                            srcImg.getHeight(null), Image.SCALE_SMOOTH), 0, 0,
	                    null);
	            // 3、设置水印旋转
	            if (null != degree) {
	                g.rotate(Math.toRadians(degree),
	                        (double) buffImg.getWidth() / 2,
	                        (double) buffImg.getHeight() / 2);
	            }

	            // 4、水印图片的路径 水印图片一般为gif或者png的，这样可设置透明度
	            ImageIcon imgIcon = new ImageIcon(iconPath);

	            // 5、得到Image对象。
	            Image img = imgIcon.getImage();

	            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,
	                    alpha));
	            // 6、水印图片的位置
	            g.drawImage(img, positionWidth, positionHeight, null);
	            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));
	            // 7、释放资源
	            g.dispose();

	            // 8、生成图片
	            os = new FileOutputStream(targerPath);
	            ImageIO.write(buffImg, "JPG", os);

	            System.out.println("图片完成添加水印图片");

	        } catch (Exception e) {
	            e.printStackTrace();
	        } finally {
	            try {
	                if (null != os)
	                    os.close();
	            } catch (Exception e) {
	                e.printStackTrace();
	            }
	        }
	    }
}
